一:ubuntu变超级用户并实现远程连接:
 1.修改 root 密码
  sudo passwd root

 2. 以root账户登录
  xxx@ubuntu14:~$ su 
 Password:
 3.修改 /etc/ssh/sshd_config配置文件 :
  root@ubuntu14:~# vi /etc/ssh/sshd_config

  注释掉 #PermitRootLogin without-password，添加 PermitRootLogin yes
  # Authentication:
  LoginGraceTime 120
  #PermitRootLogin without-password
  PermitRootLogin yes
  StrictModes yes

 4. 重启 ssh  服务
  root@ubuntu14:~# sudo service ssh restart

二:jdk安装
  (1).简单的安装方法
    安装JDK的最简单方法应该就是使用apt-get来安装了，但是源一般是OpenJDK，如果需要安装Oracle的JDK这种方法就不合适了，直接跳过看下面的章节。

　 1.使用ctrl+alt+t打开终端，你可以添加一个含有OpenJDK源的仓库，一般是不需要，因为一般都有。

　　 备份原始源文件：cp /etc/apt/sources.list /etc/apt/sources.list.bak.1

　　 vim /etc/apt/sources.list

　　 修改里面的源就行了。

    2.更新系统安装包缓存，并且安装OpenJDK8

　　 sudo apt-get update

　　 sudo apt-get install openjdk-8-jdk

　 3.如果你系统中存在多个版本的JDK，使用下列命令设置一个默认的JDK

　　 sudo update-alternatives --config java

　　 sudo update-alternatives --config javac

　　 输入选择的java版本的编号

　 4.最后检查当前的java版本查看是否编译成功

　　 java -version

(2).手动安装JDK
    1.去oracle官网下载,链接点此。也可以使用wget http://download.oracle.com/otn-pub/java/jdk/8u111-b14/jdk-8u111-linux-x64.tar.gz 安装包在你执行这个命令时所在的文件夹位置。

　 2.解压 tar -zxvf jdk-8u111-linux-x64.tar.gz

　 3.移动到自己想放的位置：

　　　　mkdir /usr/lib/jdk    

　　　　mv jdk1.8.0_111  /usr/local/jdk/jdk1.8

　 4.设置环境变量：

　　　　a.方案一：修改所有用户全局配置文件，作用于：vim /etc/profile 

　　　　 export JAVA_HOME=/usr/local/jdk/jdk1.8.0_211

　　　　 export JRE_HOME=${JAVA_HOME}/jre

　　　　 export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib

　　　　 export PATH=.:${JAVA_HOME}/bin:$PATH

　　　　 方案二：修改当前用户配置文件，只作用于当前用户：vim ~/.bashrc 设置与上一样
	b.修改系统配置文件
	set Java environment
	export JAVA_HOME=/usr/local/jdk/jdk1.8.0_211
	export JRE_HOME=$JAVA_HOME/jre
	export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH
	export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH
        c.jdk和maven一起配置
        
     if [ "$PS1" ]; then
  if [ "$BASH" ] && [ "$BASH" != "/bin/sh" ]; then
    # The file bash.bashrc already sets the default PS1.
    # PS1='\h:\w\$ '
    if [ -f /etc/bash.bashrc ]; then
      . /etc/bash.bashrc
    fi
  else
    if [ "`id -u`" -eq 0 ]; then
      PS1='# '
    else
      PS1='$ '
    fi
  fi
fi
      #配置地点
        export MAVEN_HOME=/usr/local/maven/apache-maven-3.6.1
        export JAVA_HOME=/usr/local/jdk/jdk1.8.0_211
        export JRE_HOME=$JAVA_HOME/jre
        export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH
        export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$MAVEN_HOME/bin:$PATH

if [ -d /etc/profile.d ]; then
  for i in /etc/profile.d/*.sh; do
    if [ -r $i ]; then
      . $i
    fi
  done
  unset i
fi


　 5.使修改的配置立刻生效：source /etc/profile 或者 source ~/.bashrc

　 6.检查是否安装成功：java -version

三:docker脚本安装(阿里云镜像加速 用docker参考下载镜像容器库:
  https://hub.docker.com/search?q=&type=image)
 有时ubuntu的/etc/apt/source.list中的源比较旧了，不能get下载，需要更新一下，更新方法：
 sudo apt-get -y update
 更新完毕之后，在使用apt-get就没有问题了。
 1.安装
 curl -fsSL https://get.docker.com -o get-docker.sh
 sh get-docker.sh --mirror Aliyun (sh get-docker.sh --mirror AzureChinaCloud)
 2.加速（选一）
  针对Docker客户端版本大于1.10.0的用户,修改daemon配置文件/etc/docker/daemon.json来使用加速器，这个是阿里给出的代码
  vi /etc/docker/daemon.json 编辑
  阿里加速配置:
  {
    "registry-mirrors": ["https://vt6z4y79.mirror.aliyuncs.com"]
  }
  国内镜像加速配置:
  {
    "registry-mirrors": ["https://registry.docker-cn.com"]
  }

  或命令行执行
  sudo mkdir -p /etc/docker
  sudo tee /etc/docker/daemon.json <<-'EOF'
  {
    "registry-mirrors": ["https://vt6z4y79.mirror.aliyuncs.com"]
  }
  EOF

  sudo tee /etc/docker/daemon.json <<-'EOF'
  {
    "registry-mirrors": ["https://registry.docker-cn.com"]
  }
  EOF

  修改之后重启docker就可以使用国内镜像了，这个是重启的命令
  sudo systemctl daemon-reload
  sudo systemctl restart docker
  <your accelerate address> 指的是自己登录国内镜像网站，获取到的镜像加速器地址，每个人都不同。
 3.docker拉取镜像时错误处理
  比如:docker pull tomcat时报错：
  Error response from daemon: Get https://registry-1.docker.io/v2/library/nginx/manifests/1.14-alpine: 
  Get https://auth.docker.io/token?scope=repository%3Alibrary%2Fnginx%3Apull&service=registry.docker.io
  : dial tcp: lookup auth.docker.io: no such host
 处理:
	这个是因为dns域名没有解析的原因。编辑/etc/resolv.conf 文件，增加一行dns地址，
	例如：nameserver 8.8.4.4

四:docker容器拉取镜像
 （一)、Docker命令:
  1.docker images 或 docker ps -a  //命令用来查看docker中所包含的镜像信息

  2.docker ps -a    //命令用来查看docker中所包含所有容器信息(运行状态/不运行状态)

  3.docker ps     //命令用来查看docker中所有正在运行的容器信息

  4.docker build -it 镜像name:镜像tag Dockerfile所在路径    //这是通过Dockerfile来构建一个镜像
    比如docker build -t mytomcat .
  5.docker run -d -p  宿主机端口:容器端口  --name 容器名称 image 镜像名  //这是通过一个image来构建一个container
    比如docker run -d -p 8081:8080 --name tomcat2 tomcat

  6.停止所有的container，这样才能够删除其中的images：
	docker stop $(docker ps -a -q)
   docker rmi 镜像名称:镜像tag/镜像Id    //通过一个镜像名称或者镜像Id来删除一个镜像

  7.删除容器和镜像
    
   (1).删除容器：
	docker rm -f $(docker ps -a -q)    //删除所有容器

    docker rm -f 容器名称/容器Id     //通过容器名称/容器Id来删除一个容器
       
    docker container prune       //删除所有停止的容器

   (3).删除images
	docker rmi <image id>    //通过image的id来指定删除谁
	
	//删除虚悬镜像,即id为<None>的image
	docker rmi $(docker images | grep "^<none>" | awk "{print $3}") 
	
   	docker rmi $(docker images -q -f dangling=true)  //不用交互
	
	docker rmi 镜像id -f  强制删除(包括虚悬镜像)

	
	docker rmi $(docker images -q)  //删除全部image

  8.docker pull 镜像name:镜像tag          //从仓库中拉取一个镜像,比如docker pull ubuntu:16.04

  9.docker push 镜像name:镜像tag       //往仓库中推送一个镜像

  10.交互启动ubuntu 16.04容器,使用后就删除

   docker run -it --rm ubuntu:16.04 bash

  11.交互启动ubuntu 16.04容器

  docker run -it ubuntu:16.04(容器对应的镜像名) bash ;如 docker run -it tomcat bash

  12.交互的进入指定容器

 docker exec -it 43a8509c403b(容器id) bash

  13.运行docker中的tomcat容器

 docker run -p 8080:8080 tomcat

 更多docker命令，请查看docker官网文档：http://www.docker.com

  14.查看id为 123 的容器的日志

 docker logs -f 123

 15.停止tomcat2容器： docker stop tomcat2(容器名)

 16.重启tomcat2容器： docker restart tomcat2(容器名)

 17.以数据卷持久化启动容器
                                        -v表示数据卷                      对应
  docker run -p 8080:8080 --name tomcat -d -v /usr/local/docker/tomcat/ROOT:/usr/local/tomcat/webaps/ROOT tomcat
   上行代码注释:                 容器名 -d表示后台运行    宿主机目录(挂载数据卷)           容器目录  

 18.启动已有容器: docker start 容器id
 19.关闭已有容器: docker stop 容器id
 20.重启容器:docker restart 容器id
 21.docker network create mynet 创建一个名为mynet的网络
五.docker-compose安装
 1.从github上下载docker-compose二进制文件安装

  下载最新版的docker-compose :https://blog.csdn.net/yedongfeng_1314/article/details/82555588
  sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
原文链接：https://blog.csdn.net/pushiqiang/article/details/78682323
  sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose

  sudo curl -L https://github.com/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
  sudo curl -L git:://github.com/docker/compose/releases/download/1.16.0/docker-compose-`uname -s`-`uname -m` > /install-package
  添加可执行权限?
  sudo chmod +x /usr/local/bin/docker-compose

  测试安装结果:
docker-compose --version

 2.pip安装

  sudo pip install docker-compose



 3.docker-compose配置文件结构:详解见docker-compose.yml文件

 4.命令
 （1）构建和启动容器
  docker-compose up
 （2）后台构建建启动容器
   docker-compose up -d
  (3)登录到nginx容器中
   docker-compose exec nginx bash            

  (4)删除所有nginx容器,镜像
   docker-compose down                              

  (5) 显示所有容器
   docker-compose ps                                  

  (6) 重新启动nginx容器 
   docker-compose restart nginx                   

六.gitLab
 1.下载安装（基于docker-compose环境）
 docker pull twang2218/gitlab-ce-zh
 2.ssh免密登录
  ssh-keygen -t rsa -C "1484157619@qq.com" (gitlab或github注册邮箱)
七.linux操作
 1.mv *.* ..          //移动当前目录所有文件和文件夹到上级目录
 
 2.mv filename1.txt filename2.yml  //修改文件名

 3.htop   //显示详细信息，但须安装:安装方法(apt-get install htop)
 
 4.chmod 777 dir/file   //修改文件读写和执行权限

八.nexus（基于docker-compose环境）
  1.mvn deploy -Dmaven.test.skip=true   //idea Terminal 终端部署上传依赖包和项目到nexus私服(不带测试代码)
  2.代码上传第三方依赖,本处上传D:\me\girl.jpg

  mvn deploy:deploy-file 
 -DgroupId=images.picture.girl
 -DartifactId=girl
 -Dversion=1
 -Dpackaging=jar 
 -Dfile=D:\me\girl.jpg
 -Durl=http://192.168.111.138:8081/repository/maven-releases/ 
 -DrepositoryId=nexus-releases

  3.mvn package -Dmaven.test.skip=true  //打包(打成war或jar包)
在idea Terminal终端运行需要弄成一行
mvn deploy:deploy-file -DgroupId=images.picture.girl -DartifactId=girl -Dversion=1  -Dpackaging=jar -Dfile=D:\me\girl.jpg -Durl=http://192.168.111.138:8081/repository/maven-releases/ -DrepositoryId=nexus-releases

九.registry个人镜像管理平台搭建
 搭建服务端:
 1.docker-compose.yml 配置服务端配置文件
  
  version: '3.1'
services:
 registry:
  image: registry
  restart: always
  container_name: myregistry
  ports:
   - 5000:5000
  volumes:
   - /usr/local/docker/registry/data:/var/lib/regist
 
 2.修改daemon配置文件/etc/docker/daemon.json
  命令: 
   vi /etc/docker/daemon.json 
  
  内容:
   {
  "registry-mirrors": ["https://vt6z4y79.mirror.aliyuncs.com"],
  "insecure-registries":["192.168.111.138:5000"]
 }
 搭建客户端:
 3.配置客户端docker-compose.yml配置文件
$ vim docker-compose.yml

version: '3.1'
services:
 frontend:
  image: konradkleine/docker-registry-frontend:v2
  ports:
    - 80:80
  volumes:
    - ./frontend/certs/frontend.crt:/etc/apache2/server.crt:ro
    - ./frontend/certs/frontend.key:/etc/apache2/server.key:ro
  environment:
    - ENV_DOCKER_REGISTRY_HOST=192.168.111.138
    - ENV_DOCKER_REGISTRY_PORT=5000

浏览器查询测试：1. http://192.168.111.138:5000/v2/_catalog  //镜像仓库服务端地址/v2/_catalog
                2. http://192.168.111.138:5000/v2/
4.命令
 （1）重启你的 docker daemon：
  service docker restart  或  systemctl restart docker.service   
5.push 镜像
 docker tag your-image ip:port/your-image  //如  docker tag tomcat 192.168.111.138:5000/tomcat
 docker push ip:port/your-image   //如  docker push 192.168.111.138:5000/tomcat

6.pull 镜像
 docker pull 目标仓库(ip:port)/your-image // docker pull 192.168.111.138:5000/tomcat:9
7.重启网络服务
service network restart


 


  
















